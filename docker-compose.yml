version: '2'
networks:
    micronet:

services:
    ## Consul
    consul-bootstrap:
      image          : consul
      container_name : consul-bootstrap
      command        :
        - "agent"
        - "-server"
        - "-bootstrap"
        - "-ui"
        - "-data-dir=/tmp"
        - "-advertise=${DOCKER_MACHINE_IP}" # Advertise using host environment variable ${DOCKER_MACHINE_IP}
                                            # so that we could do `curl $(docker-machine ip):8500/v1/catalog/services`
        - "-client=0.0.0.0"
        - "-node=bootstrap-node"
        - "-node-id=102b597f-0b4c-4702-985e-327a5a022cc7"
      volumes        : [ "./tmp/consul-bootstrap:/tmp/consul" ]
      networks       : [ micronet ]
      ports          :
        - "8400:8400"
        - "8500:8500"
        - "8600:8600/udp"
  
    # Registrator
    registrator:
      image         : gliderlabs/registrator
      container_name: registrator
      command       : ["-ip", "${DOCKER_MACHINE_IP}", "consul://consul-bootstrap:8500"]
      volumes       : [ "/var/run/docker.sock:/tmp/docker.sock" ]
      networks      : [ micronet ]
      depends_on    : [ consul-bootstrap ]
  
    # Flask services
    hello-server:
      build         : .
      container_name: hello-server
      working_dir   : /usr/local/app/consul-docker-test
      entrypoint    : ""
      command       : [ "python", "-m", "flask-server.hello-server" ]
      volumes       : [ "./flask-server:/usr/local/app/consul-docker-test/flask-server" ] # So that changes in host dir, will trigger reload in container
      dns: [ "$DOCKER_MACHINE_IP" ]
      dns_search: [ "service.consul" ]
      networks      : [ micronet ]
      ports         : [ "80" ]
      environment   :
        - SERVICE_NAME=hello-server
        - CONSUL_AGENT_ADDR=${DOCKER_MACHINE_IP}
        - CONSUL_AGENT_PORT=8500
      depends_on    : [ registrator ]

    # Our call-server that will use consul to discover hello-server and perform REST request to  hello-server    
    call-server:
      build         : .
      container_name: call-server
      working_dir   : /usr/local/app/consul-docker-test
      entrypoint    : ""
      command       : [ "python", "-m", "flask-server.call-server" ]
      volumes       : [ "./flask-server:/usr/local/app/consul-docker-test/flask-server" ] # So that changes in host dir, will trigger reload in container
      dns: [ "$DOCKER_MACHINE_IP" ]
      dns_search: [ "service.consul" ]
      networks      : [ micronet ]
      ports         : [ "80" ]
      environment   :
        - SERVICE_NAME=call-server
        - CONSUL_AGENT_ADDR=${DOCKER_MACHINE_IP}
        - CONSUL_AGENT_PORT=8500
      depends_on    : [ registrator ]